import io.gitlab.arturbosch.detekt.report.ReportMergeTask

plugins {
    id 'com.android.application' version '8.0.0' apply false
    id 'com.android.library' version '8.0.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.20' apply false
    id 'org.jetbrains.kotlin.kapt' version '1.8.20' apply false
    id 'org.jetbrains.kotlin.plugin.parcelize' version '1.8.20' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.20' apply false
    id 'org.jetbrains.dokka' version '1.8.20'
    id 'com.google.dagger.hilt.android' version '2.46' apply false
    id 'com.google.devtools.ksp' version '1.8.20-1.0.11' apply false
    id 'io.gitlab.arturbosch.detekt' version '1.22.0' apply false
}

repositories {
    mavenCentral()
}

tasks.register("detekt", ReportMergeTask) { mergeTask ->
    mergeTask.group = "hubber"
    mergeTask.output = project.layout.buildDirectory.file("reports/detekt/merge.xml")
    gradle.includedBuilds.forEach { includeBuild ->
        mergeTask.dependsOn includeBuild.task(":detekt")
        mergeTask.input.from(new File(includeBuild.projectDir, "build/reports/detekt/merge.xml"))
    }
    subprojects.forEach { subProject ->
        subProject.tasks.all { task ->
            if (task.name == "detekt") {
                mergeTask.dependsOn task
                mergeTask.input.from(new File(subProject.projectDir, "build/reports/detekt/detekt.xml"))
            }
        }
    }
}

tasks.register("check") { mergeTask ->
    mergeTask.group = "hubber"
    mergeTask.dependsOn gradle.includedBuilds*.task(":check")
    subprojects.forEach { subProject ->
        subProject.tasks.all { task ->
            if (task.name == "check") {
                mergeTask.dependsOn task
            }
        }
    }
}

tasks.register("clean") { mergeTask ->
    mergeTask.group = "hubber"
    mergeTask.dependsOn gradle.includedBuilds*.task(":clean")
    subprojects.forEach { subProject ->
        subProject.tasks.all { task ->
            if (task.name == "clean") {
                mergeTask.dependsOn task
            }
        }
    }
}

tasks.register("assemble") { mergeTask ->
    mergeTask.group = "hubber"
    mergeTask.dependsOn gradle.includedBuilds*.task(":assemble")
    subprojects.forEach { subProject ->
        subProject.tasks.all { task ->
            if (task.name == "assemble") {
                mergeTask.dependsOn task
            }
        }
    }
}

tasks.register("testAll") { mergeTask ->
    mergeTask.group = "hubber"
    mergeTask.dependsOn gradle.includedBuilds*.task(":testAll")
    subprojects.forEach { subProject ->
        subProject.tasks.all { task ->
            if (task.name == "test") {
                mergeTask.dependsOn task
            }
        }
    }
}

tasks.register("testDebugOnly") { mergeTask ->
    mergeTask.group = "hubber"
    mergeTask.dependsOn gradle.includedBuilds*.task(":testAll")
    subprojects.forEach { subProject ->
        subProject.tasks.all { task ->
            if (task.name == "testDebugUnitTest") {
                mergeTask.dependsOn task
            }
        }
    }
}
